//iterative way

//single stack
/*
 vector<int> postorderTraversal(TreeNode* root) {
        vector<int> postorder;
        if(root == NULL) return postorder;
        stack<TreeNode*> st1;
        TreeNode* current = root;  
        while(current != NULL || !st1.empty()) {
            if(current != NULL){
                st1.push(current);
                current = current->left;
            }else{
                TreeNode* temp = st1.top()->right;
                if (temp == NULL) {
                    temp = st1.top();
                    st1.pop(); 
                    postorder.push_back(temp->val);
                    while (!st1.empty() && temp == st1.top()->right) {
                        temp = st1.top();
                        st1.pop(); 
                        postorder.push_back(temp->val);
                    }
                } else {
                    current = temp;
                }
            }
        }
        return postorder;
    }
    
*/



/*
//2 stacks
void postOrder2(Node* root,vector<int>&v)
{
  stack<Node*> st1,st2;
  st1.push(root);
  while(!st1.empty()){
    root= st1.top();
    st1.pop();
    st2.push(root);
    if(root->left)st1.push(root->left);
    if(root->right)st1.push(root->right);
  }
  
  while(!st2.empty()){
  v.push_back(st2.top());
  st2.pop();
  }
  
}


*/


void postOrder2(Node* root,vector<int>&v)
{
  // Your code here
  if(!root){
      return;
  }
  postOrder2(root->left,v);
  postOrder2(root->right,v);
    v.push_back(root->data);
}

vector<int> postOrder(Node * root){
    vector<int>v;
    postOrder2(root,v);
    return v;
}
