//               ()           ()     ()()()()()  ()    ()()()()()         
//              ()()         ()()        ()      ()    ()                 
//             ()  ()       ()  ()       ()      ()    ()                 
//            ()()()()     ()()()()      ()      ()    ()()()()           
//           ()      ()   ()      ()     ()      ()    ()                 
//          ()        () ()        ()    ()      ()    ()                 

#include <bits/stdc++.h>
using namespace std;
#define MOD  (int)(1e9+7)
#define SIZE (int)(1e5+5)
#define all(x) x.begin(),x.end()
#define  rep(x,y)  for(int x=0;x<y; x++)
#define vi   vector <int>
#define lb     lower_bound
#define ub     upper_bound
#define  pb     push_back
#define F      first
#define S      second
#define ll     signed long long int
#define pqs  priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>>>
#define fastIO ios_base::sync_with_stdio(false); cin.tie(nullptr);
#define endl "\n"
typedef pair<int, int> pii;


int sol(int k,int n,vector<vector<int>>&dp){
    if(n==0 || n==1) return n;
    if(k==1) return n;
    if(dp[k][n]!=-1) return dp[k][n];
    int moves=n;
    int l=0,h=n;
    while(l<=h){
        int mid= (l+h)/2;
         dp[k-1][mid-1]= sol(k-1,mid-1,dp);
         dp[k][n-mid]= sol(k,n-mid,dp);
        int temp= 1+ max(dp[k-1][mid-1],dp[k][n-mid]);
        moves= min(moves,temp);
        if(dp[k-1][mid-1]<dp[k][n-mid]){
            l=mid+1;
        }
        else {
            h=mid-1;
        }
    }
    return dp[k][n]=moves;
}

int Solution::solve(int k, int n)
{
    //dp.clear();
    vector<vector<int>>dp(k+1,vector<int>(n+1,-1));
    //memset(dp,-1,sizeof(dp));
    return sol(k,n,dp);
}
