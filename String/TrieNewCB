#include <bits/stdc++.h>
using namespace std;

struct Node
{
    char data;
    unordered_map<char, Node *> children;
    bool terminal;

    Node(char c)
    {
        data = c;
        terminal = false;
    }
};

class Trie
{

    Node *root;
    int cnt;

public:
    Trie()
    {
        root = new Node('\0');
        cnt = 0;
    }
    void insert(char *word)
    {
        Node *temp = root;
        for (int i = 0; word[i] != '\0'; i++)
        {
            char c = word[i];
            if (temp->children.count(c))
            {
                temp = temp->children[c];
            }
            else
            {
                Node *n = new Node(c);
                temp->children[c] = n;
                temp = n;
            }
        }
        temp->terminal = true;
    }

    bool find(char *word)
    {
        Node *temp = root;
        for (int i = 0; word[i] != '\0'; i++)
        {
            char c = word[i];
            if (temp->children.count(c) == 0)
            {
                return false;
            }
            else
            {
                temp = temp->children[c];
            }
        }
        return temp->terminal;
    }
};

int main()
{
    Trie t;
    char words[][10] = {"no", "not", "news", "dog", "doggy"};
    int i = 0;
    for (; i < 6; i++)
    {
        t.insert(words[i]);
    }
    while (i--)
    {
        char w[10];
        cin >> w;
        if (t.find(w))
            cout << "Present" << endl;
        else
            cout << "Absent" << endl;
    }
}
